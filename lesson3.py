#ПРАКТИЧНЕ ЗАВДАННЯ №3.1
"""Вхідні дані: 3 дійсних числа a, b, c. Передаються в програму як аргументи командного рядка.

Результат роботи: рядок "triangle", якщо можуть існувати відрізки з такою довжиною та з них можна скласти трикутник, або "not triangle" -- якщо ні.

Наприклад
Вхідні дані: 10 20 30
Приклад виклику: python lab3_1.py 10 20 30
Результат: not triangle
Вхідні дані: 1 1 1
Приклад виклику: python lab3_1.py 1 1 1
Результат: triangle
Вхідні дані: 5.5 5.5 -2
Приклад виклику: python lab3_1.py 5.5 5.5 -2
Результат: not triangle"""

import sys

a = float(sys.argv[1])
b = float(sys.argv[2])
c = float(sys.argv[3])

if (a>0 and b>0 and c>0 and c<(a+b) and c>(a-b) and a<(b+c) and a>(b-c) and b<(a+c) and b>(a-c)):
    print 'triangle'
else:
    print 'not triangle'

#ПРАКТИЧНЕ ЗАВДАННЯ №3.2
"""Програма має розраховувати числа послідовності Фібоначчі. Послідовність Фібоначчі -- це послідовність чисел, в якій кожний елемент дорівнює сумі двох попередніх. При цьому нульовий елемент вважається за 0, а перший 1. Отже, сама послідовність виглядає наступним чином:
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, …

Вхідні дані: ціле невід'ємне число n. Передається в програму як аргумент командного рядка.

Результат роботи: значення n-го числа послідовності Фібоначчі.

Будь ласка, не використовуйте рекурсію.

Наприклад
Вхідні дані: 0
Приклад виклику: python lab3_2.py 0
Результат: 0
Вхідні дані: 10
Приклад виклику: python lab3_2.py 10
Результат: 55"""

import sys

n = int(sys.argv[1])

ai = 0
a_first = 0
a_second = 1


if n<0:
    print 'impossible'
else:
    for count in range(600):
        ai = ai+a_first
        a_first = a_second
        a_second = ai
        if count == n:
            print ai

